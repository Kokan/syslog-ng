
python {
from syslogng import LogSource
from syslogng import LogMessage

import alsaaudio
import numpy
import speech_recognition
import wave
from os import path

def s2text(path_to_audio):
     
    r = speech_recognition.Recognizer()
    with speech_recognition.AudioFile(path_to_audio) as source:
        audio = r.record(source)
     
    try:
        return r.recognize_sphinx(audio)
    except speech_recognition.UnknownValueError:
        return "Syslog-ng could not understand audio"
    except speech_recognition.RequestError as e:
        return "Syslog-ng error; {0}".format(e)

def record(audio_path):
    inp = alsaaudio.PCM(alsaaudio.PCM_CAPTURE)
    inp.setchannels(1)
    inp.setrate(44100)
    inp.setformat(alsaaudio.PCM_FORMAT_S16_LE)
    inp.setperiodsize(1024)
    
    w = wave.open(audio_path, 'w')
    w.setnchannels(1)
    w.setsampwidth(2)
    w.setframerate(44100)
    
    silent = 0
    
    while True:
        l, data = inp.read()
        a = numpy.fromstring(data, dtype='int16')
        if numpy.abs(a).mean() <= 500:
           silent += 1
        w.writeframes(data)
        if silent > 100:
           break

AUDIO_FILE = path.join(path.dirname(path.realpath(__file__)), "test.wav")
 
class TeleVoiceSource(LogSource):
    def init(self, options): # optional
        print("init")
        self.exit = False
        return True
 
    def run(self): # mandatory
        while not self.exit:
            record(AUDIO_FILE)
            msg = LogMessage(s2text(AUDIO_FILE))
            self.post_message(msg)
 
    def request_exit(self): # mandatory
        self.exit = True
};


block source tele-voice()
{
    python(
        class("TeleVoiceSource")
    );
};

